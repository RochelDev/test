Table Ministere 


# Implémentation d'un CRUD Classique avec Laravel

Voici comment créer un CRUD (Create, Read, Update, Delete) de base avec Laravel, en prenant l'exemple d'une entité "Ministère" comme mentionné dans vos fichiers.

## 1. Configuration Initiale

### Créer le modèle et la migration
```bash
php artisan make:model Ministere -m
```

### Éditer la migration (`database/migrations/xxxx_create_ministeres_table.php`)
```php
Schema::create('ministeres', function (Blueprint $table) {
    $table->id();
    $table->string('code', 10)->unique(); // Ex: "MEF"
    $table->string('nom');
    $table->text('description')->nullable();
    $table->timestamps();
});
```

### Exécuter la migration
```bash
php artisan migrate
```

## 2. Création du Controller

```bash
php artisan make:controller MinistereController --resource
```

### Contenu du Controller (`app/Http/Controllers/MinistereController.php`)
```php
<?php

namespace App\Http\Controllers;

use App\Models\Ministere;
use Illuminate\Http\Request;

class MinistereController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $ministeres = Ministere::all();
        return view('ministeres.index', compact('ministeres'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('ministeres.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:ministeres|max:10',
            'nom' => 'required|max:255',
            'description' => 'nullable',
        ]);

        Ministere::create($request->all());

        return redirect()->route('ministeres.index')
                         ->with('success', 'Ministère créé avec succès.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Ministere $ministere)
    {
        return view('ministeres.show', compact('ministere'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Ministere $ministere)
    {
        return view('ministeres.edit', compact('ministere'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Ministere $ministere)
    {
        $request->validate([
            'code' => 'required|max:10|unique:ministeres,code,'.$ministere->id,
            'nom' => 'required|max:255',
            'description' => 'nullable',
        ]);

        $ministere->update($request->all());

        return redirect()->route('ministeres.index')
                         ->with('success', 'Ministère mis à jour avec succès.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Ministere $ministere)
    {
        $ministere->delete();

        return redirect()->route('ministeres.index')
                         ->with('success', 'Ministère supprimé avec succès.');
    }
}
```

## 3. Création des Vues

### Structure des dossiers
```
resources/views/
  ministeres/
    index.blade.php
    create.blade.php
    show.blade.php
    edit.blade.php
```

### Layout de base (`resources/views/layouts/app.blade.php`)
```html
<!DOCTYPE html>
<html>
<head>
    <title>Gestion des Ministères</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        @yield('content')
    </div>
</body>
</html>
```

### Index (`resources/views/ministeres/index.blade.php`)
```html
@extends('layouts.app')

@section('content')
    <h1>Liste des Ministères</h1>
    <a href="{{ route('ministeres.create') }}" class="btn btn-primary mb-3">Ajouter</a>

    @if(session('success'))
        <div class="alert alert-success">
            {{ session('success') }}
        </div>
    @endif

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Code</th>
                <th>Nom</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach($ministeres as $ministere)
                <tr>
                    <td>{{ $ministere->code }}</td>
                    <td>{{ $ministere->nom }}</td>
                    <td>
                        <a href="{{ route('ministeres.show', $ministere->id) }}" class="btn btn-info">Voir</a>
                        <a href="{{ route('ministeres.edit', $ministere->id) }}" class="btn btn-warning">Modifier</a>
                        <form action="{{ route('ministeres.destroy', $ministere->id) }}" method="POST" style="display:inline">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-danger">Supprimer</button>
                        </form>
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>
@endsection
```

### Create (`resources/views/ministeres/create.blade.php`)
```html
@extends('layouts.app')

@section('content')
    <h1>Créer un Ministère</h1>
    
    <form action="{{ route('ministeres.store') }}" method="POST">
        @csrf
        <div class="mb-3">
            <label for="code" class="form-label">Code</label>
            <input type="text" class="form-control" id="code" name="code" required>
        </div>
        <div class="mb-3">
            <label for="nom" class="form-label">Nom</label>
            <input type="text" class="form-control" id="nom" name="nom" required>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
    </form>
@endsection
```

## 4. Définition des Routes

Dans `routes/web.php`:
```php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\MinistereController;

Route::resource('ministeres', MinistereController::class);
```

## 5. Améliorations Possibles

Pour votre projet de gestion de mobilité, vous pouvez étendre ce CRUD de base avec :

1. **Relations entre modèles** :
   ```php
   // Dans le modèle Ministere
   public function postes()
   {
       return $this->hasMany(Poste::class);
   }

   // Dans le modèle Poste
   public function ministere()
   {
       return $this->belongsTo(Ministere::class);
   }
   ```

2. **Soft Deletes** (suppression logique) :
   ```php
   // Dans la migration
   $table->softDeletes();

   // Dans le modèle
   use Illuminate\Database\Eloquent\SoftDeletes;
   class Ministere extends Model
   {
       use SoftDeletes;
   }
   ```

3. **Pagination** :
   ```php
   // Dans le controller
   public function index()
   {
       $ministeres = Ministere::paginate(10);
       return view('ministeres.index', compact('ministeres'));
   }
   ```

4. **Recherche/filtrage** :
   ```php
   public function index(Request $request)
   {
       $query = Ministere::query();
       
       if ($request->has('search')) {
           $query->where('nom', 'like', '%'.$request->search.'%')
                 ->orWhere('code', 'like', '%'.$request->search.'%');
       }
       
       $ministeres = $query->paginate(10);
       return view('ministeres.index', compact('ministeres'));
   }
   ```

Ce CRUD de base vous permettra de gérer les ministères dans votre application, et vous pouvez appliquer le même pattern pour les autres entités comme les postes, les types de mobilité, etc.







# CRUD avec Laravel 12 et Livewire

Voici comment implémenter un CRUD moderne en utilisant Laravel 12 et Livewire 3, adapté à votre projet de gestion des mobilités.

## 1. Installation des dépendances

```bash
composer require livewire/livewire
```

## 2. Création du composant Livewire

```bash
php artisan make:livewire Ministere/Index
php artisan make:livewire Ministere/Create
php artisan make:livewire Ministere/Edit
php artisan make:livewire Ministere/Show
```

## 3. Modèle et Migration

### Modèle `Ministere`
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Ministere extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'code',
        'nom',
        'description'
    ];
}
```

### Migration
```php
Schema::create('ministeres', function (Blueprint $table) {
    $table->id();
    $table->string('code', 10)->unique();
    $table->string('nom');
    $table->text('description')->nullable();
    $table->timestamps();
    $table->softDeletes();
});
```

## 4. Composant Index

### `app/Livewire/Ministere/Index.php`
```php
<?php

namespace App\Livewire\Ministere;

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\Ministere;

class Index extends Component
{
    use WithPagination;

    public $search = '';
    public $perPage = 10;

    protected $queryString = [
        'search' => ['except' => ''],
        'perPage' => ['except' => 10]
    ];

    public function delete($id)
    {
        Ministere::find($id)->delete();
        session()->flash('success', 'Ministère supprimé avec succès.');
    }

    public function render()
    {
        return view('livewire.ministere.index', [
            'ministeres' => Ministere::when($this->search, function($query) {
                $query->where('code', 'like', '%'.$this->search.'%')
                      ->orWhere('nom', 'like', '%'.$this->search.'%');
            })
            ->paginate($this->perPage)
        ]);
    }
}
```

### Vue `resources/views/livewire/ministere/index.blade.php`
```html
<div>
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">Gestion des Ministères</h1>
            <a href="{{ route('ministeres.create') }}" class="btn btn-primary">
                <i class="fas fa-plus mr-2"></i>Ajouter
            </a>
        </div>

        @if(session('success'))
            <div class="alert alert-success mb-6">
                {{ session('success') }}
            </div>
        @endif

        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="p-4 border-b flex justify-between items-center">
                <div class="flex items-center">
                    <input 
                        type="text" 
                        wire:model.live.debounce.300ms="search" 
                        placeholder="Rechercher..." 
                        class="input input-bordered"
                    >
                </div>
                <select wire:model.live="perPage" class="select select-bordered">
                    <option value="10">10 par page</option>
                    <option value="25">25 par page</option>
                    <option value="50">50 par page</option>
                </select>
            </div>

            <div class="overflow-x-auto">
                <table class="table table-zebra">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Nom</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @forelse($ministeres as $ministere)
                            <tr>
                                <td>{{ $ministere->code }}</td>
                                <td>{{ $ministere->nom }}</td>
                                <td class="flex space-x-2">
                                    <a href="{{ route('ministeres.show', $ministere->id) }}" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="{{ route('ministeres.edit', $ministere->id) }}" class="btn btn-warning btn-sm">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button 
                                        wire:click="delete({{ $ministere->id }})" 
                                        wire:confirm="Êtes-vous sûr de vouloir supprimer ce ministère?"
                                        class="btn btn-error btn-sm"
                                    >
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="3" class="text-center py-4">Aucun ministère trouvé</td>
                            </tr>
                        @endforelse
                    </tbody>
                </table>
            </div>

            <div class="p-4 border-t">
                {{ $ministeres->links() }}
            </div>
        </div>
    </div>
</div>
```

## 5. Composant Create

### `app/Livewire/Ministere/Create.php`
```php
<?php

namespace App\Livewire\Ministere;

use Livewire\Component;
use App\Models\Ministere;

class Create extends Component
{
    public $code;
    public $nom;
    public $description;

    protected $rules = [
        'code' => 'required|unique:ministeres|max:10',
        'nom' => 'required|max:255',
        'description' => 'nullable',
    ];

    public function save()
    {
        $this->validate();

        Ministere::create([
            'code' => $this->code,
            'nom' => $this->nom,
            'description' => $this->description,
        ]);

        session()->flash('success', 'Ministère créé avec succès.');
        return redirect()->route('ministeres.index');
    }

    public function render()
    {
        return view('livewire.ministere.create');
    }
}
```

### Vue `resources/views/livewire/ministere/create.blade.php`
```html
<div>
    <div class="container mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="p-6 border-b">
                <h2 class="text-xl font-semibold">Créer un nouveau Ministère</h2>
            </div>

            <form wire:submit="save" class="p-6">
                <div class="grid grid-cols-1 gap-6">
                    <div>
                        <label for="code" class="block mb-2">Code</label>
                        <input 
                            type="text" 
                            id="code" 
                            wire:model="code" 
                            class="input input-bordered w-full"
                            placeholder="Ex: MEF"
                        >
                        @error('code') <span class="text-error">{{ $message }}</span> @enderror
                    </div>

                    <div>
                        <label for="nom" class="block mb-2">Nom</label>
                        <input 
                            type="text" 
                            id="nom" 
                            wire:model="nom" 
                            class="input input-bordered w-full"
                            placeholder="Nom complet du ministère"
                        >
                        @error('nom') <span class="text-error">{{ $message }}</span> @enderror
                    </div>

                    <div>
                        <label for="description" class="block mb-2">Description</label>
                        <textarea 
                            id="description" 
                            wire:model="description" 
                            rows="3" 
                            class="textarea textarea-bordered w-full"
                        ></textarea>
                    </div>
                </div>

                <div class="flex justify-end mt-6 space-x-4">
                    <a href="{{ route('ministeres.index') }}" class="btn btn-ghost">
                        Annuler
                    </a>
                    <button type="submit" class="btn btn-primary">
                        Enregistrer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
```

## 6. Configuration des Routes

Dans `routes/web.php`:
```php
<?php

use Illuminate\Support\Facades\Route;
use App\Livewire\Ministere\Index;
use App\Livewire\Ministere\Create;
use App\Livewire\Ministere\Edit;
use App\Livewire\Ministere\Show;

Route::get('/ministeres', Index::class)->name('ministeres.index');
Route::get('/ministeres/create', Create::class)->name('ministeres.create');
Route::get('/ministeres/{ministere}', Show::class)->name('ministeres.show');
Route::get('/ministeres/{ministere}/edit', Edit::class)->name('ministeres.edit');
```

## 7. Optimisations pour votre projet

1. **Formulaires modaux** : Utilisez Livewire pour des formulaires en modal sans rechargement
2. **Validation en temps réel** : Ajoutez `wire:model.blur` pour valider quand le champ perd le focus
3. **Notifications toast** : Intégrez Alpine.js pour des notifications élégantes
4. **Sécurité** : Ajoutez des politiques (Policies) pour gérer les permissions
5. **Traduction** : Préparez les textes pour une internationalisation facile

## 8. Avantages de cette approche

1. **Réactivité** : Mises à jour en temps réel sans rechargement
2. **Performance** : Moins de requêtes HTTP que dans une approche classique
3. **Maintenabilité** : Logique et vue regroupées dans des composants cohérents
4. **Expérience développeur** : Développement plus rapide et intuitif

Pour les autres entités de votre projet (Postes, TypeMobilité, etc.), vous pouvez reproduire le même pattern en adaptant les champs spécifiques à chaque modèle.